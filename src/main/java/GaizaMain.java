/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import client.SlashCommandManager;
import lombok.extern.slf4j.Slf4j;
import util.BotInfo;
import model.GlobalUserInformation;
import model.InitDatabase;
import model.SeriesTrackerInformation;
import org.apache.commons.lang3.StringUtils;
import org.javacord.api.DiscordApi;
import org.javacord.api.DiscordApiBuilder;
import org.javacord.api.entity.intent.Intent;
import org.javacord.api.interaction.*;
import org.javacord.api.listener.interaction.SlashCommandCreateListener;
import org.javacord.api.listener.message.MessageCreateListener;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.*;

@Slf4j
public class GaizaMain {

    public static void main(String[] args) {
        DiscordApi api = new DiscordApiBuilder()
                .setToken(getDiscordBotToken())
                .addIntents(Intent.MESSAGE_CONTENT)
                .login()
                .join();

        botPropertiesInitialization(api);
        botCommandInitialization(api);
    }

    @SuppressWarnings("unused")
    static void botPropertiesInitialization(DiscordApi api) {
        initializeBotInformation(api);
        InitDatabase dbInit = new InitDatabase(api);
        GlobalUserInformation initUsers = new GlobalUserInformation(api);
        SeriesTrackerInformation seriesTracker = new SeriesTrackerInformation();
        api.updateActivity(BotInfo.getInstance().getBotActivity());

        SlashCommandManager slashCommandManager = new SlashCommandManager();
        slashCommandManager.createSlashCommands(api);
        slashCommandManager.createAdminSlashCommands(api);

        Set<SlashCommand> slashCommands = api.getGlobalSlashCommands().join(); //todo add logging for slash commands

        System.out.println("\n\nManagement files loaded!");
        System.out.println("--------------------------------\n");
    }

    private static void botCommandInitialization(DiscordApi api) {
        Map<String, File> commands = new HashMap<>();
        commands.put("userCommands", new File(BotInfo.getInstance().getValue("userCommands")));
//        commands.put("adminCommands", new File(BotInfo.getInstance().getValue("adminCommands"));
        commands.put("listener", new File(BotInfo.getInstance().getValue("listeners")));

        try {
            for (Map.Entry<String, File> command : commands.entrySet()) {
                for (final File commandName : Objects.requireNonNull(command.getValue().listFiles())) {
                    String formattedCommand = command.getKey() + "." + commandName.getName().replace(".java", "");
                    if (!commandName.isDirectory() && StringUtils.equalsAnyIgnoreCase(command.getKey(), "userCommands", "adminCommands")) {
                        api.addSlashCommandCreateListener((SlashCommandCreateListener) Class.forName(formattedCommand).getDeclaredConstructor().newInstance());
                        System.out.println(commandName.getName() + " loaded!");
                    } else if (!commandName.isDirectory() && StringUtils.equalsIgnoreCase(command.getKey(), "listener")) {
                        api.addMessageCreateListener((MessageCreateListener) Class.forName(formattedCommand).getDeclaredConstructor().newInstance());
                        System.out.println(commandName.getName() + " loaded!");
                    }
                }
                System.out.println("\n" + command.getKey() + " files loaded!");
                System.out.println("--------------------------------\n");
            }
        } catch (ClassNotFoundException cnf) {
            log.error("Class not found: " + cnf.getMessage());
            cnf.printStackTrace();
        } catch (NoSuchMethodException nsm) {
            log.error("No method was found: " + nsm.getMessage());
            nsm.printStackTrace();
        } catch (Exception e) {
            log.error("Unknown error occurred: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private static String getDiscordBotToken() {
        try {
            return Files.readAllLines(Paths.get(BotInfo.getInstance().getValue("botToken"))).get(0);
        } catch (IOException ioe) {
            log.error("Error reading lines from bot token file");
            log.error("Cause: " + ioe.getMessage());

            ioe.printStackTrace();
        }

        return null;
    }


    private static void initializeBotInformation(DiscordApi api) {
        BotInfo.getInstance().setOwnerId(api.getOwnerId().isPresent() ? String.valueOf(api.getOwnerId().get()) : null);
        BotInfo.getInstance().setBotId(api.getYourself().getIdAsString());
        BotInfo.getInstance().setBotName(api.getYourself().getName());
        BotInfo.getInstance().setBotImageStr(api.getYourself().getAvatar().getUrl().toString());
        BotInfo.getInstance().setBotImage(api.getYourself().getAvatar());
        BotInfo.getInstance().setBotInvite("https://discordapp.com/oauth2/authorize?client_id=369295519576489984&scope=bot&permissions=2146561111");
        BotInfo.getInstance().setBotRepo("https://github.com/IKanraI/Gaiza");
        BotInfo.getInstance().setServerCount(api.getServers().size()); //todo replace
        BotInfo.getInstance().setZaraiUserId("422153253170708490");

        try {
            BotInfo.getInstance().setTenorApiKey(Files.readAllLines(Paths.get(BotInfo.getInstance().getValue("tenorApiKey"))).get(0));
            BotInfo.getInstance().setBotActivity(Files.readAllLines(Paths.get(BotInfo.getInstance().getValue("botActivity"))).get(0));
        } catch (IOException ioe) {
            log.error("File not read");
            log.error("Error: " + ioe.getMessage());

            ioe.printStackTrace();
        }
    }
}